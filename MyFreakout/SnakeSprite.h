/**********************************************************************************************//**
 * @file	SnakeSprite.h
 *
 * @brief	Declares the snake sprite class.
 **************************************************************************************************/

#pragma once

/**********************************************************************************************//**
 * @brief	BlockWidth 定义了游戏中单元格的长度
 **************************************************************************************************/
extern int BlockWidth ;

/**********************************************************************************************//**
 * @typedef	struct SnakeBlock
 *
 * @brief	定义每一个单元格的数据结构.
 **************************************************************************************************/
typedef struct SnakeBlock{
	int x;
	int y;
	SnakeBlock *next;
	SnakeBlock *pre;
}SnakeBlock;

/**********************************************************************************************//**
 * @typedef	enum MoveDirection
 *
 * @brief	枚举四个方向.
 **************************************************************************************************/
typedef enum MoveDirection{
	MoveLeft,
	MoveRight,
	MoveUp,
	MoveDown,
	MoveStay
}MoveDirection;

/**********************************************************************************************//**
 * @class	SnakeSprite
 *
 * @brief	定义蛇精灵.
 *
 * @author	Exitingchen
 * @date	2013/11/6
 **************************************************************************************************/
class SnakeSprite
{
public:
	SnakeSprite(int screenWidth,int screenHight);
	~SnakeSprite();

	/**********************************************************************************************//**
	 * @fn	bool SnakeSprite::move();
	 *
	 * @brief	模拟蛇在当前方向上的单步移动。
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 *
	 * @return	true if it succeeds, false if it fails.
	 **************************************************************************************************/
	bool move();

	/**********************************************************************************************//**
	 * @fn	void SnakeSprite::draw();
	 *
	 * @brief	根据当前的状态在屏幕中绘制蛇
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 **************************************************************************************************/
	void draw();

	/**********************************************************************************************//**
	 * @fn	void SnakeSprite::addBlock(SnakeBlock block);
	 *
	 * @brief	在蛇的头部添加一个单元.
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 *
	 * @param	block	单元格.
	 **************************************************************************************************/
	void addBlock(SnakeBlock block);

	/**********************************************************************************************//**
	 * @fn	void SnakeSprite::drawBlock(SnakeBlock *block);
	 *
	 * @brief	绘制一个单元格。
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 *
	 * @param   单元格指针
	 **************************************************************************************************/

	void drawBlock(SnakeBlock *block);

	/**********************************************************************************************//**
	 * @fn	void SnakeSprite::setCurrentDirection(MoveDirection dir);
	 *
	 * @brief	设置蛇当前的运动方向.
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 *
	 * @param	dir	方向.
	 **************************************************************************************************/

	void setCurrentDirection(MoveDirection dir);

	/**********************************************************************************************//**
	 * @fn	bool SnakeSprite::detectConflictWithBlock(SnakeBlock *block);
	 *
	 * @brief	检测蛇头是否和指定的单元格存在碰撞.
	 *
	 * @author	Exitingchen
	 * @date	2013/11/6
	 *
	 * @param	单元格的指针。
	 *
	 * @return	如果存在碰撞则返回true，否则false。
	 **************************************************************************************************/

	bool detectConflictWithBlock(SnakeBlock *block);
private:

	/**********************************************************************************************//**
	 * @brief	这个单元格指针指向一个链表，存放当前蛇上面所有的单元格.
	 **************************************************************************************************/
	SnakeBlock *blocks;

	/**********************************************************************************************//**
	 * @brief	这个单元格指针指向blocks链表里面的尾部单元格.
	 **************************************************************************************************/
	SnakeBlock *tailBlock;

	/**********************************************************************************************//**
	 * @brief	Number of blocks.
	 **************************************************************************************************/
	int blockCount;

	/**********************************************************************************************//**
	 * @brief	The current dir.
	 **************************************************************************************************/
	MoveDirection currentDir;

	/**********************************************************************************************//**
	 * @brief	Width of the screen.
	 **************************************************************************************************/
	int screenWidth;

	/**********************************************************************************************//**
	 * @brief	The screen hight.
	 **************************************************************************************************/

	int screenHight;

	/**********************************************************************************************//**
	 * @brief	移动速度.
	 **************************************************************************************************/

	int speed;
};

